<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEACABoBQAAJgAAABAQAAABACAAaAQAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAAAB
        AAAAAAAAAAAAAAABAAAAAQAAAAAAAP///wDcijIAVFRUAK+vrwD2w4MAfIKHANzc3ADXoWMAbGxsAMXF
        xQCXl5cA4r6aAO2zbgDw8PAA4JhHAOG0hgD3zpYAYGBgAOmkVQDQ0NAAjIyMAN2tcwC4u78AcXV6AKWl
        pQDSmFgA56ljAJ2enwB8enkA67qEAOu1eQDekz4A+fn5AOrq6gB3fIEAyMvPAOGdTwCFhYcA4alqAPO4
        dgBbW1sAqqqqAH9/fwDvvH0A47R7AIWJjwC+wcQAs7a7AOGRNwDWm14A5qRcAK6wtgDbp20A9fX1AGRk
        ZABoaGgAkJCQAOa0dQDJyckAuLi4ANykZQDmtoQA77V0AOGwdQCbm5sAb29vAHR4fQCJiYkAsrKyAJSU
        lADFyMwAwcTIAOmwbQCDg4MAu77BAMLCwgCAhIcAmZufAOu3gQCgoKAA9MOGAOuydwC6u7wAXV1dAN7e
        3gB5foMArKysAKenpwB7e3wA7LRzAHl5eQB9gIUA8LNuAMDDxgC8wMMA669uAOCXRQDmqWEAxcjKAPHx
        8QBpaWkAysrKAH5+fgCAgIAAxMTEAMPDwwCKiooAj4+PAKmpqQCfn58AeHyAAHt7ewC+wcUA57R1ALq+
        wQCfoKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
</value>
  </data>
</root>
